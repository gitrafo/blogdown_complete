<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data playground</title>
    <link>/</link>
    <description>Recent content on Data playground</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Top 20 movies based on IMDB scores</title>
      <link>/2017/09/10/top-20-movies-based-on-imdb-scores/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/09/10/top-20-movies-based-on-imdb-scores/</guid>
      <description># load librarieslibrary(tidyverse)library(stringr)library(shiny)Basic data wrangling firstLoad and check the data structure# load dataraw &amp;lt;- read_csv(&amp;quot;../../static/data/movie_data.csv&amp;quot;)# structure of dataglimpse(raw)## Observations: 5,043## Variables: 28## $ color &amp;lt;chr&amp;gt; &amp;quot;Color&amp;quot;, &amp;quot;Color&amp;quot;, &amp;quot;Color&amp;quot;, &amp;quot;Color&amp;quot;, ...## $ director_name &amp;lt;chr&amp;gt; &amp;quot;James Cameron&amp;quot;, &amp;quot;Gore Verbinski&amp;quot;, &amp;quot;...## $ num_critic_for_reviews &amp;lt;dbl&amp;gt; 723, 302, 602, 813, NA, 462, 392, 32...## $ duration &amp;lt;dbl&amp;gt; 178, 169, 148, 164, NA, 132, 156, 10.</description>
    </item>
    
    <item>
      <title>Loading multiple *.csv (*.xlsx) effectively</title>
      <link>/2017/03/08/loading-multiple-csv-xlsx-effectively/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/08/loading-multiple-csv-xlsx-effectively/</guid>
      <description>This brief post is a “how to” load multiple csv / xlsx files into single data frame. Say, we have a couple of *.xlsx files in one folder (some of them in sub-directories) and we would like to bind them all into one. Quite common task. Let´s do it:)
library(tidyverse)library(readxl)Step 1list.files function with argument full.names = TRUE (preserving complete path to all files) and argument recursive = TRUE is handy in case your files are in any level of sub-directories (represented with “next_level” folder in my case).</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>Hi, I´m Petr. This blog is my playground with data. I realized recently Í´m still looking for the same analytics / scripting technics and perhaps would make sense to capture it somewhere - and the blog was born.
Listen / read / talk and forget; write and remember. - Yihui Xie
Thanks to Yihui Xie and his colleagues for blogdown package making this blog possible.
Thanks to Hadley Wickham and his colleagues for tidyverse making the scripts possible.</description>
    </item>
    
  </channel>
</rss>